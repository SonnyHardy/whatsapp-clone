name: Whatsapp-clone Backend Pipeline

on:
  push:
    branches:
      - main

    paths:
      - whatsappclone/**
      - docker/backend/**
      - docker/compose.yml
      - .github/workflows/*-backend.yml
  workflow_dispatch:


jobs:
  compile:
    runs-on: ubuntu-latest
    name: Compile project
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Compile project
        run: |
          cd whatsappclone
          chmod +x ./mvnw
          ./mvnw clean compile

  unit-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16.3-bullseye
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: username
          POSTGRES_PASSWORD: password
          POSTGRES_DB: whatsapp_clone_test

    name: Unit tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Running unit tests
        run: |
          cd whatsappclone
          chmod +x ./mvnw
          ./mvnw clean test

  build:
    runs-on: ubuntu-latest
    name: Build backend
    needs: [compile, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build project
        run: |
          cd whatsappclone
          chmod +x ./mvnw
          ./mvnw clean package -Dspring.profiles.active=prod -DskipTests

  build-image:
    name: Build and Push Docker image
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build project
        run: |
          cd whatsappclone
          chmod +x ./mvnw
          ./mvnw clean package -Dspring.profiles.active=prod -DskipTests

      - name: Extract project version
        id: extract_version
        run: |
          cd whatsappclone
          echo "VERSION=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push to DockerHub
        uses: docker/build-push-action@v6
        with:
          context: whatsappclone
          file: whatsappclone/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/wac-api:${{ steps.extract_version.outputs.VERSION }},${{ secrets.DOCKERHUB_USERNAME }}/wac-api:latest
          build-arg: |
            PROFILE=prod
            APP_VERSION=${{ steps.extract_version.outputs.VERSION }}
            ISSUER_URI=${{ secrets.ISSUER_URI }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
            DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
            CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}

  deploy:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [build-image]
    steps:
      - name: Deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/debian/whatsapp-clone/
            sudo docker compose pull -q
            sudo docker compose down wac-api
            sudo docker compose up -d wac-api